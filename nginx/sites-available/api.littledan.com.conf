# Nginx Virtual Host Configuration for API Subdomain
# api.littledan.com - Clean subdomain separation for API with comprehensive rate limiting

server {
    listen 80;
    server_name api.littledan.com;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl;
    http2 on;
    server_name api.littledan.com;

    # SSL Configuration (CertBot managed these paths for api.littledan.com)
    ssl_certificate /etc/letsencrypt/live/api.littledan.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.littledan.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # CORS is handled by FastAPI backend - do not duplicate headers here

    # Connection limiting
    limit_conn perip 10;

    # Block bots on API subdomain
    if ($block_bot = 1) {
        return 444;
    }

    # Block suspicious query strings
    if ($query_string ~* "(\<|%3C).*script.*(\>|%3E)") {
        return 444;
    }
    if ($query_string ~* "GLOBALS(=|\[|\%[0-9A-Z]{0,2})") {
        return 444;
    }
    if ($query_string ~* "_REQUEST(=|\[|\%[0-9A-Z]{0,2})") {
        return 444;
    }

    # Block suspicious request methods
    if ($request_method !~ ^(GET|HEAD|POST|PUT|DELETE|OPTIONS)$ ) {
        return 444;
    }

    # Authentication endpoints - very strict rate limiting
    location ~* ^/(auth|login|register|password) {
        limit_req zone=auth burst=5 nodelay;
        limit_conn api_conn 2;

        # Additional bot blocking for auth endpoints
        if ($block_bot = 1) {
            return 444;
        }

        proxy_pass http://127.0.0.1:8000;

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;

        # Timeout settings for auth
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Syntax highlighting endpoint - very permissive for large code blocks
    location = /highlight/syntax {
        limit_req zone=highlight burst=5000 nodelay;
        limit_conn highlight_conn 1000;

        proxy_pass http://127.0.0.1:8000;

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;

        # Extended timeouts for large code processing
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # PDF export endpoint - moderate rate limiting
    location /pdf/ {
        limit_req zone=api burst=20 nodelay;
        limit_conn api_conn 3;

        proxy_pass http://127.0.0.1:8000;

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;

        # Extended timeouts for PDF generation
        proxy_connect_timeout 120s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
    }

        # Icons endpoints - allow large payloads for icon pack installations
    location /icons/ {
        limit_req zone=api burst=10 nodelay;
        limit_conn api_conn 2;

        # Allow large request bodies for icon pack data (up to 50MB)
        client_max_body_size 50m;

        # Additional bot blocking for icons endpoints
        if ($block_bot = 1) {
            return 444;
        }

        proxy_pass http://127.0.0.1:8000;

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;

        # Extended timeouts for large icon pack processing
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;

        # Extended proxy buffers for large responses
        proxy_buffering on;
        proxy_buffer_size 256k;
        proxy_buffers 8 512k;
        proxy_busy_buffers_size 1m;
    }

    # General API endpoints - standard rate limiting
    location / {
        # API rate limiting - increased burst for dictionary tab with multiple categories
        limit_req zone=api burst=50 nodelay;
        limit_conn api_conn 5;

        # Additional bot blocking for API endpoints
        if ($block_bot = 1) {
            return 444;
        }

        # Simple proxy pass - no path rewriting needed
        # Backend serves endpoints directly at root level
        proxy_pass http://127.0.0.1:8000;

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;

        # Proxy settings for better performance
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;

        # Timeout settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Block access to sensitive files
    location ~* \.(env|git|svn|htaccess|htpasswd|ini|log|sh|sql|bak|backup|old|tmp|temp)$ {
        return 444;
    }

    # Block access to hidden files
    location ~ /\. {
        return 444;
    }

    # Error handling
    error_log /var/log/nginx/api.littledan.com.error.log;
    access_log /var/log/nginx/api.littledan.com.access.log;
}