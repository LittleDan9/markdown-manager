[tool.poetry]
name = "markdown-manager-api"
version = "0.1.0"
description = "FastAPI backend for Markdown Manager"
authors = ["Dan Little <dan@littledan.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.13"
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.32.0"}
pydantic = {extras = ["email"], version = "^2.11.7"}
pydantic-settings = "^2.6.0"
# Starlette (explicit dependency for middleware)
starlette = "^0.41.0"
# Database dependencies
sqlalchemy = "^2.0.0"
alembic = "^1.13.0"
# PostgreSQL drivers: asyncpg for async operations, psycopg for sync/migrations
asyncpg = "^0.30.0"
psycopg = {extras = ["binary"], version = "^3.2.9"}
# SQLite driver for development/testing
aiosqlite = "^0.20.0"
# Authentication
passlib = {extras = ["bcrypt", "argon2"], version = "^1.7.4"}
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
# MFA and TOTP
pyotp = "^2.9.0"
qrcode = {extras = ["pil"], version = "^8.2"}
# Additional utilities
email-validator = "^2.1.0"
httpx = "^0.28.1"
pygments = "^2.17.0"
beautifulsoup4 = "^4.13.4"
psutil = "^7.0.0"
authlib = "^1.6.3"
requests = "^2.32.5"
python-multipart = "^0.0.20"
# Filesystem operations
aiofiles = "^24.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"
black = "^24.10.0"
isort = "^5.13.0"
flake8 = "^7.1.0"
mypy = "^1.13.0"
httpx = "^0.28.1"
# Testing utilities
pytest-mock = "^3.12.0"
faker = "^19.6.0"
types-aiofiles = "^24.1.0.20250606"
pytest-json-report = "^1.5.0"
deptry = "^0.23.1"
pre-commit = "^4.2.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py312']
extend-exclude = '''
(
  # Documentation files with long API examples
  .*docs\.py
  | .*documentation\.py
  | .*api_docs\.py
)
'''

[tool.isort]
profile = "black"
line_length = 88


[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
plugins = [
    "pydantic.mypy"
]
pretty = true
color_output = true
mypy_path = "typings"
ignore_missing_imports = true
exclude = "tests"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
]
pythonpath = ["."]
asyncio_mode = "auto"
markers = [
    "e2e: marks tests as end-to-end tests (deselect with '-m \"not e2e\"')",
]

[tool.bandit]
exclude_dirs = []
skips = ["B608"]

[tool.coverage.run]
source = ["app"]
omit = [
    "tests/*",
    "docker/*",
    "app/main.py",
    "*/migrations/*",
    "*/alembic/*",

    "app/configs/environment.py",
    "app/services/pdf_processor.py",
    "app/middleware/error_handling.py",
]
branch = true

[tool.coverage.report]
fail_under = 55
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug:",
    "if settings\\.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.deptry]
# Ignore specific unused dependencies that are used implicitly
per_rule_ignores = { "DEP002" = ["asyncpg", "psycopg", "email-validator", "aiosqlite"] }

[tool.xenon]
max_absolute = "B"
max_modules = "B"
max_average = "A"
exclude = ["tests/*", "*/tests/*", "tests/**/*"]
