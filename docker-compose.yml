services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx-dev.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/scripts:/etc/nginx/scripts:ro
    depends_on:
      - backend

  frontend:
    image: node:24
    working_dir: /app
    volumes:
      - ./frontend:/app
      - type: tmpfs
        target: /app/node_modules/.cache
        tmpfs:
          size: 5368709120  # 5 GiB
    ports:
      - "3000:3000"
    command: sh -c "npm install && CHOKIDAR_USEPOLLING=true npm run serve"
    environment:
      - CHOKIDAR_USEPOLLING=true
    init: true

  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: markdown_manager
    ports:
      - "5432:5432"
    volumes:
      - ./backend/postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -U postgres -d markdown_manager || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: backend
    tmpfs:
      - /tmp  # for FastAPI temp files
    working_dir: /markdown_manager
    volumes:
      - ./backend/app:/markdown_manager/app
      - ./backend/migrations/:/markdown_manager/migrations/
      - ./backend/markdown_manager.db:/markdown_manager/markdown_manager.db
      - ./backend/alembic.ini:/markdown_manager/alembic.ini
      # Volume mount for filesystem-based document storage
      - ./storage:/documents
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    environment:
      - POETRY_VIRTUALENVS_IN_PROJECT=true
      - DEBUG_PASSWORD_RESET_TOKEN=true
      - MARKDOWN_STORAGE_ROOT=/documents
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      db:
        condition: service_healthy
      export-service:
        condition: service_healthy

  export-service:
    build:
      context: ./export-service
      dockerfile: Dockerfile
    image: littledan9/markdown-manager-export:latest
    ports:
      - "8001:8001"
    volumes:
      - ./export-service/app:/export-service/app
      - ./export-service/static:/export-service/static
    environment:
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  markdown-lint-service:
    build:
      context: ./markdown-lint-service
      dockerfile: Dockerfile
    environment:
      - MARKDOWN_LINT_PORT=8002
      - NODE_ENV=development
    ports:
      - "8002:8002"
    volumes:
      - ./markdown-lint-service/server.js:/app/server.js  # Mount only server.js for hot reload
    command: ["npm", "start"]     # Use standard start command
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
